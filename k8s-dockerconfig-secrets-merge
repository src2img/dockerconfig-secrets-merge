#!/usr/bin/env bash

set -euo pipefail

if ! command -v base64 >/dev/null; then
  echo "[ERROR] base64 is not installed."
  exit 2
fi

if ! command -v jq >/dev/null; then
  echo "[ERROR] jq is not installed."
  exit 2
fi

if ! command -v kubectl >/dev/null; then
  echo "[ERROR] kubectl is not installed."
  exit 2
fi

usage() {
  echo
  echo "Usage:"
  echo "  $0 --source secret1 --source secret2 [--source secret3] --target new-secret [--namespace namespace]"
  echo
  exit 1
}

sources=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    --namespace)
      shift
      namespace="$1"
      ;;

    --source)
      shift
      sources+=("$1")
      ;;

    --target)
      shift
      target="$1"
      ;;

    *)
      echo "Unknown flag $1"
      usage
      ;;
  esac
  shift
done

if [ -z ${target+x} ]; then
  echo "The target is not set."
  usage
fi

if [ "${#sources[@]}" -lt "2" ]; then
  echo "At least two sources must be provided."
  usage
fi

kubectlArgs=()

if [ -n "${namespace+x}" ]; then
  kubectlArgs+=("--namespace" "${namespace}")
fi

dockerconfigjson='{"auths":{}}'

# Merge all secret data into a single dockerconfigjson
for source in "${sources[@]}"; do
  echo "[INFO] Processing secret ${source}"
  secretData="$(kubectl "${kubectlArgs[@]}" get secret "${source}" -o json)"
  secretType="$(jq -r '.type' <<<"${secretData}")"

  # Ensure we have the namespace for the create case
  if [ -n "${namespace+x}" ]; then
    namespace="$(jq -r '.metadata.namespace' <<<"${secretData}")"
  fi

  # Check the secret type
  if [ "${secretType}" != "kubernetes.io/dockerconfigjson" ]; then
    echo "[ERROR] The secret '${source}' must be of type 'kubernetes.io/dockerconfigjson', but is of type '${secretType}'"
    exit 1
  fi

  # Extract and iterate the docker config
  secretDockerConfigJSON="$(jq -r '.data[".dockerconfigjson"]' <<<"${secretData}" | base64 -d)"
  while read -r registryHost; do
    echo "[INFO] Found credentials for ${registryHost}"
    registryCredentials="$(jq -r ".auths[\"${registryHost}\"]" <<<"${secretDockerConfigJSON}")"

    existingRegistryCredentials="$(jq -r ".auths[\"${registryHost}\"]" <<<"${dockerconfigjson}")"
    if [ "${existingRegistryCredentials}" != "null" ] && [ "${existingRegistryCredentials}" != "${registryCredentials}" ]; then
      echo "[ERROR] Different credentials for ${registryHost} are included in multiple secrets. This cannot be merged."
      exit 1
    fi

    dockerconfigjson="$(jq -c ".auths[\"${registryHost}\"] = ${registryCredentials}" <<<"${dockerconfigjson}")"
  done <<<"$(jq -r '.auths | keys[]' <<<"${secretDockerConfigJSON}")"
done

echo "[INFO] Creating secret ${target}"
cat <<EOF | kubectl "${kubectlArgs[@]}" create -f -
apiVersion: v1
data:
  .dockerconfigjson: $(base64 -w 0 <<<"${dockerconfigjson}")
kind: Secret
metadata:
  name: ${target}
  namespace: ${namespace}
type: kubernetes.io/dockerconfigjson
EOF
